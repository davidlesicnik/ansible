local.file_match "local_files" {
    path_targets = [{"__path__" = "/var/log/syslog"}]
    sync_period = "1m"
  }
  
  prometheus.remote_write "metrics_service" {
    endpoint {
      name = "hosted-prometheus"
      url  = "https://prometheus-us-central1.grafana.net/api/prom/push"
  
      basic_auth {
        username = "{{ prom_user }}"
        password = "{{ prom_pw }}"
      }
    }
  }
  
  loki.write "grafana_cloud_loki" {
    endpoint {
        url = "https://logs-prod-us-central1.grafana.net/loki/api/v1/push"
        basic_auth {
            username = "{{ loki_user }}"
            password = "{{ loki_pw }}"
        }
    }
  }
  
  prometheus.exporter.unix "local_system" { }
  
  prometheus.scrape "scrape_metrics" {
    targets         = prometheus.exporter.unix.local_system.targets
    forward_to = [prometheus.remote_write.metrics_service.receiver]
    scrape_interval = "1m"
  }
  
  loki.source.file "log_scrape" {
    targets    = local.file_match.local_files.targets
    forward_to = [loki.write.grafana_cloud_loki.receiver]
    tail_from_end = true
  }
  
  loki.source.journal "jourland_{{ ansible_hostname }}" {
    forward_to = [loki.write.grafana_cloud_loki.receiver]
    relabel_rules = loki.relabel.journal.rules
    labels        = {
      component = "loki.source.journal",
      host      = "{{ ansible_hostname }}",
    }
  }
  
  loki.relabel "journal" {
    forward_to = []
  
    rule {
      source_labels = ["__journal__systemd_unit"]
      target_label  = "unit"
    }
  }
  
  {% if ansible_hostname == "docker" %}
  prometheus.relabel "integrations_cadvisor" {
      forward_to = [prometheus.remote_write.metrics_service.receiver]
  
      rule {
          source_labels = ["__name__"]
          regex         = "up|container_cpu_usage_seconds_total|container_fs_inodes_free|container_fs_inodes_total|container_fs_limit_bytes|container_fs_usage_bytes|container_last_seen|container_memory_usage_bytes|container_network_receive_bytes_total|container_network_tcp_usage_total|container_network_transmit_bytes_total|container_spec_memory_reservation_limit_bytes|machine_memory_bytes|machine_scrape_error"
          action        = "keep"
      }
  }
  
  prometheus.scrape "integrations_cadvisor" {
      targets    = discovery.relabel.integrations_cadvisor.output
      forward_to = [prometheus.relabel.integrations_cadvisor.receiver]
  }
  
  discovery.docker "logs_integrations_docker" {
      host             = "unix:///var/run/docker.sock"
      refresh_interval = "5s"
  }
  discovery.relabel "logs_integrations_docker" {
      targets = []
  
      rule {
          target_label = "job"
          replacement  = "integrations/docker"
      }
  
      rule {
          target_label = "instance"
          replacement  = constants.hostname
      }
  
      rule {
          source_labels = ["__meta_docker_container_name"]
          regex         = "/(.*)"
          target_label  = "container"
      }
  
      rule {
          source_labels = ["__meta_docker_container_log_stream"]
          target_label  = "stream"
      }
  }
  loki.source.docker "logs_integrations_docker" {
      host             = "unix:///var/run/docker.sock"
      targets          = discovery.docker.logs_integrations_docker.targets
      forward_to       = [loki.write.grafana_cloud_loki.receiver]
      relabel_rules    = discovery.relabel.logs_integrations_docker.rules
      refresh_interval = "5s"
  }
  {% endif %}
  